/*
    A script for testing Plazma Script syntax.
*/

var startDate = Date();
var date1 = Date(2015, 12, 31);

// boolean expressions
assert(true || false);
assert(!false);
assert(true && true);
assert(!true || !false);
assert(true && (true || false));

// relational expressions
assert(1 < 2);
assert(666 >= 666);
assert(-5 > -6);
assert(0 >= -1);
assert('a' < 's');
assert('sw' <= 'sw');

// add/sub
assert(1 + 999 == 1000);
assert([1] + 1 == [1, 1]);
assert(2 - -2 == 4);
assert(-1 + 1 == 0);
assert(1 - 50 == -49);
assert([1, 2, 3, 4, 5] - 4 == [1, 2, 3, 5]);

// mul/div
assert(3 * 50 == 150);
assert(4 / 2 == 2);
assert(1 / 4 == 0.25);
assert(999999 % 3 == 0);
assert(-5 * -5 == 25);
assert([1, 2, 3] * 2 == [1, 2, 3, 1, 2, 3]);
assert('ab' * 3 == "ababab");

// power
assert(2 ^ 10 == 1024);
assert(3 ^ 3 == 27);

// for and while statements
var a = 0;

println("for 1..10");
println();

var i = 999;
println("+============================" + i);

for (i in 1..10) {
  a = a + i;
  println("i = " + i);
}

assert(a == (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10));

a = 0;
println("for 0..<10");
println();

println("-============================" + i);

for (i in 0..<10) {
  a = a + i;
  println("i = " + i);
}

assert(a == (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9));


var b = -10;
var c = 0;
while (b < 0) { 
  c = c + b;
  b = b + 1;
}

assert(c == -(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10));

// if
a = 123;
if (a > 200) {
  assert(false);
}

if (a < 100) {
  assert(false);
} else if (a > 124) {
  assert(false);
} else if (a < 124) {
  assert(true);
} else {
  assert(false);
}

if (false) {
  assert(false);
} else {
  assert(true);
}

// functions
def twice(n) {
  var temp = n + n; 
  return temp; 
}

def squared(n) { 
  return n*n; 
}

def squaredAndTwice(n) { 
  return twice(squared(n)); 
}

def list() {
  return [7,8,9];
}

assert(squared(666) == 666 ^ 2);
assert(twice(squared(5)) == 50);
assert(squaredAndTwice(10) == 200);
assert(squared(squared(squared(2))) == 2 ^ 2 ^ 2 ^ 2);
assert(list() == [7, 8, 9]);
assert(list().size() == 3);
assert(list()[1] == 8);

// bubble sort
def sort(list) {
  while (!sorted(list)) {}
}

def sorted(list) {
  var n = list.size();
  for (i in 0 .. n-2) {
    if (list[i] > list[i+1]) {
      var temp = list[i+1];
      list[i+1] = list[i];
      list[i] = temp;
      return false;
    }
  }
  return true;
}

var numbers = [3, 5, 1, 4, 2];

sort(numbers);
assert(numbers == [1, 2, 3, 4, 5]);

// recursive calls
def fib(n) {
  if (n < 2) {
    return n;
  } else {
    return fib(n-2) + fib(n-1);
  }
}

var sequence = [];
for (i in 0 .. 10) {
  sequence = sequence + fib(i);
}

assert(sequence == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]);

// lists and lookups, `in` operator
var n = [[1,0,0], [0,1,0], [0,0,1]];




var p = [-1, 'abc', true];

assert('abc' in p);
assert([0,1,0] in n);
assert(n[0][2] == 0);
assert(n[1][1] == n[2][2]);
assert(p[2]);
assert(p[1][2] == 'c');

println("Hello World!");
println(1 + 2);
println(1);

println("Date=" + Date(2015, 1,3));
println("CurDate=" + Date());



def percent(x, y) {
  return x / 100 * y;
}

println(percent(100, 20));
println(percent(200, 20));

println("Test priority");
println(2 + 4 * 5); // 22 40

assert(2 + 4 * 5 == 22.0);

println((1 + (2 + - 3 ^ 2)) * 4 ^ 5);

var z1 = 4 ^ 5;
var z2 = -3 ^ 2;
var z3 = 2 + z2;

println((1 + z3) * z1);
println( 1 < 2 ? 1: 2);


var list = ["key1", 100, 2, 200];
println(list);

var map = {"key1": 101, "key2": 202};
println(map);

println(map["key1"]);
println(map["key2"]);

println("map2:");
var map2 = {1:10, 2:20, 3: 30};
println(map2[1]);
println(map2[3]);


println("hello"[1] + "lka");

def fun1() {
  return "1:";
}

def fun1(x) {
  return "2:" + x;
}

println("fun1=" + fun1(100));

println("Test break");

for (i in 1..10  ) {
  if (i == 3) {
    continue;
  }
  if (i == 6) {
    break;
  }
  println(i);
}

println("Test range");

var derA = 5;
var derB = 7;
//var der = derA..derB;
var der = 1.0..< 7;

var zzz = [0, 5, 8];

for (i in zzz) {
  println(i);
}

println("Test while break");
i = 1;
b = true;
while (b) {
  if (i == 3) {
    i = i + 1;
    continue;
  }
  println(i);
  if (i == 10) {
    break;
  }
  i = i + 1;
}

// Global variable
var $F{test} = 90;
i = 0;
while (i < 10) {
  $F{test} = 3;
  println($F{test});
  i = i + 1;
}

def cc() {
  $F{test} = 7;
  println($F{test});
}
println(cc());
println($F{test});


var contact = {
 "title": "Title-1",
 "address": "Adddress-1",
 "phone": ["555-111-111-1", "555-222-222-2"]
};

println();
println("Contact info");
println("===========================");
println("title: " + contact["title"]);
println("address: " + contact["address"]);
println("phones:");
println(" 1: " + contact["phone"][0]);
println(" 2: " + contact["phone"][1]);

println(1 == 1.0);

// Date
var date2 = Date(2015, 12, 31);
var endDate = Date();

println("" + date1 + " == " + date2 + ": " + (date1 == date2));
assert(date1 == date2);

date1 = Date(2015, 12, 30);
date2 = Date(2015, 12, 31);
println("" + date1 + " != " + date2 + ": " + (date1 != date2));
assert(date1 != date2);

date1 = Date(2015, 12, 30);
date2 = Date(2015, 12, 31);
println("" + date1 + " <  " + date2 + ": " + (date1 < date2));
assert(date1 < date2);

date1 = Date(2015, 12, 30);
date2 = Date(2015, 12, 31);
println("" + date1 + " <= " + date2 + ": " + (date1 <= date2));
assert(date1 <= date2);

date1 = Date(2015, 12, 31);
date2 = Date(2015, 12, 31);
println("" + date1 + " <= " + date2 + ": " + (date1 <= date2));
assert(date1 <= date2);

date1 = Date(2015, 12, 31);
date2 = Date(2015, 12, 30);
println("" + date1 + " >  " + date2 + ": " + (date1 > date2));
assert(date1 > date2);

date1 = Date(2015, 12, 31);
date2 = Date(2015, 12, 30);
println("" + date1 + " >= " + date2 + ": " + (date1 >= date2));
assert(date1 >= date2);

date1 = Date(2015, 12, 31);
date2 = Date(2015, 12, 31);
println("" + date1 + " >= " + date2 + ": " + (date1 >= date2));
assert(date1 >= date2);

println();
println("StartDate: " + startDate);
println("EndDate: " + endDate);
println();


println("phones: " + contact.phone);
println("     1: " + contact.phone[0]);
println("     2: " + contact.phone[1]);

contact.phone[1] = "100123";
//contact["phone"][1] = "123";

println("     2: " + contact.phone[1]);

println("method: toString(): " + contact.phone.toString());


var month = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"];
var size = month.size();

for (i in 0 ..< size) {
  println("" + month[i] + " " + (i + 1));
}

println();
println("Get name: " + $book.name);

$book.name = "Name-19";
println("Set name: " + $book.name);
