
//
println("Test Set type");

//
var x = Set(1, 2, 2, 2, 3, 4, 4, 5);
println("set=" + x);

assert(x.size() == 5);

println();
println("Print set:");
println("====================");
for (e in x) {
    println(e);
}


// methods: size, isEmpty, add, remove, clear, addAll, removeAll, contains

// empty set
x = Set();
assert(x.size() == 0);
assert(x.isEmpty());


x = Set(2, 4, 4, 6, 8, 10, 10, 2);
assert(x.size() == 5);

x.add(4);
assert(x.size() == 5);

x.add(12);
assert(x.size() == 6);

x.remove(4);
assert(x.size() == 5);
assert(x == Set(2, 6, 8, 10, 12));

x.addAll([14, 16, 16, 16, 14, 18]);
assert(x.size() == 8);
assert(x == Set(2, 6, 8, 10, 12, 14, 16, 18));

x.addAll(Set(20, 20, 22, 23, 24, 24));
assert(x.size() == 12);
assert(x == Set(2, 6, 8, 10, 12, 14, 16, 18, 20, 22, 23, 24));

assert(x.removeAll([10, 2]));
assert(x.size() == 10);
assert(x == Set(6, 8, 12, 14, 16, 18, 20, 22, 23, 24));

assert(x.removeAll([10, 2, 6, 8])); // remove only 6, 8
assert(x.size() == 8);
assert(x == Set(12, 14, 16, 18, 20, 22, 23, 24));

x.clear();
assert(x.size() == 0);

x = Set(100, null, -200, 300, 100, null);
assert(x.size() == 4);

assert(x.contains(-200));
assert(x.contains(null));
assert(!x.contains(1.3));


// add
assert([1, 2] + Set(3, 1) == [1, 2, 3, 1]);
assert(Set(1, 2, 3) + [4, 5, 2, 3] == Set(1, 2, 3, 4, 5));

assert(Set(1, 2, 3, 4, 5) - Set(4) == Set(1, 2, 3, 5));
assert(Set(1, 2, 3, 4, 5) - Set(4, 1) == Set(2, 3, 5));

// union/intersection
assert((Set(1, 2, 3, 7) | Set(3, 1, 4, 5)) == Set(1, 2, 3, 7, 4, 5));
assert((Set(1, 2, 3, 7) & Set(3, 1, 4, 5)) == Set(1, 3));

// Set -> List
assert(Set(1, 2, 3, 4, 5, 2, 1, 6, 7).toList() == [1, 2, 3, 4, 5, 6, 7]);

// Set - > Set
assert(Set(1, 2, 3, 4, 5, 2, 1, 6, 7).toSet() == Set(1, 2, 3, 4, 5, 6, 7));

// clone Set
assert(Set(1, 2, 3, 4, 5, 2, 1, 6, 7).clone() == Set(1, 2, 3, 4, 5, 6, 7));
