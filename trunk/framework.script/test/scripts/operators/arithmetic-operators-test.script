
////////////////////////////////////////////////////////////
// 
// Number
//
////////////////////////////////////////////////////////////

// add/sub
assert(1 + 2 == 3);
assert(1 + 999 == 1000);
assert(-1 + 1 == 0);
assert(1 - 50 == -49);
assert(2 - -2 == 4);
assert(2 + -5 == -3);
assert(-3 -5 == -8);

assert(0.1 + 0.2 == 0.3);
assert(0.1 + 0.999 == 1.099);
assert(-0.1 + 0.1 == 0);

assert(0.1 - 0.50 == -0.4);
assert(0.2 - -0.2 == 0.4);
assert(0.2 + -0.5 == -0.3);
assert(-0.3 -0.5 == -0.8);

// mul/div
assert(3 * 50 == 150);
assert(-5 * -5 == 25);
assert(4 / 2 == 2);
assert(1 / 4 == 0.25);
assert(7 / 5 == 1.4);

// remainder
assert(999999 % 3 == 0);
assert(7 % 5 == 2);

// power
assert(2 ^ 10 == 1024);
assert(3 ^ 3 == 27);



////////////////////////////////////////////////////////////
// 
// String
//
////////////////////////////////////////////////////////////

// String + String
assert("ab" + "cd" == "abcd");

// String + any
assert("ab" + 10 == "ab10");

// any + String 
assert(10 + "ab" == "10ab"); 

// String - String
//assert("abcdxy" - "cd" == "abxy");

// String * Number
assert("ab" * 3 == "ababab");



////////////////////////////////////////////////////////////
// 
// List
//
////////////////////////////////////////////////////////////

// add/sub
assert([1, 2] + [3] == [1, 2, 3]);
assert([1, 2, 3] + [4, 5] == [1, 2, 3, 4, 5]);
assert([1, 2, 3, 4, 5] - [4] == [1, 2, 3, 5]);
assert([1, 2, 3, 4, 5] - [4, 1] == [2, 3, 5]);

// mul
assert([1, 2, 3] * 2 == [1, 2, 3, 1, 2, 3]);

// union/intersection
assert(([1, 2, 3, 7] | [3, 1, 4, 5]) == [1, 2, 3, 7, 4, 5]);
assert(([1, 2, 3, 7] & [3, 1, 4, 5]) == [1, 3]);



////////////////////////////////////////////////////////////
// 
// Date
//
////////////////////////////////////////////////////////////

// Date + Number
assert(Date(2001, 12, 31) + (24 * 60 * 60 * 1000) == Date(2002, 1, 1));
 
// Date - Number
assert(Date(2001, 12, 31) - (24 * 60 * 60 * 1000) == Date(2001, 12, 30));
 
