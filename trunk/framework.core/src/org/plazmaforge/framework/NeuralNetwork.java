/*
 * Copyright (C) 2012-2015 Oleh Hapon ohapon@users.sourceforge.net
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 * 
 * Oleh Hapon
 * Kyiv, UKRAINE
 * ohapon@users.sourceforge.net
 */

package org.plazmaforge.framework;

public class NeuralNetwork {


    
    // AND LEAR DATA
    static double learnDataAND[][] = {
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{0,0, 0},
	{1,0, 0},
	{0,1, 0},
	{1,1, 1},
	{1,1, 1},
	
	{1,1, 1}
    };

    
    // OR LEARN DATA
    static double learnDataOR[][] = {
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 1},
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	
	{1,1, 1}
	
    };

    // XOR LEARN DATA
    static double learnDataXOR[][] = {

	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	{0,0, 0},
	{1,0, 1},
	{0,1, 1},
	{1,1, 0},		
	
	
    };

    
    
    static double learnDataXNOR[][] = {
		{0,0, 1},
		{1,0, 0},
		{0,1, 0},
		{1,1, 1}		
    };

	
    static double learnDataSUM[][] = {

	{0,0, 0},	
	{0,1, 1},	
	{0,2, 2},
	{0,3, 3},
	{0,4, 4},
	{0,5, 5},
	{0,6, 6},
	{0,7, 7},
	{0,8, 8},
	{0,9, 9},	
	{0,10, 10},
	
	{1,0, 1},	
	{1,1, 2},	
	{1,2, 3},
	{1,3, 4},
	{1,4, 5},
	{1,5, 6},
	{1,6, 7},
	{1,7, 8},
	{1,8, 9},
	{1,9, 10},	
	{1,10, 11},

	{2,0, 2},	
	{2,1, 3},	
	{2,2, 4},
	{2,3, 5},
	{2,4, 6},
	{2,5, 7},
	{2,6, 8},
	{2,7, 9},
	{2,8, 10},
	{2,9, 11},	
	{2,10, 12},

	{3,0, 3},	
	{3,1, 4},	
	{3,2, 5},
	{3,3, 6},
	{3,4, 7},
	{3,5, 8},
	{3,6, 9},
	{3,7, 10},
	{3,8, 11},
	{3,9, 12},	
	{3,10, 13},

	{4,0, 4},	
	{4,1, 5},	
	{4,2, 6},
	{4,3, 7},
	{4,4, 8},
	{4,5, 9},
	{4,6, 10},
	{4,7, 11},
	{4,8, 12},
	{4,9, 13},	
	{4,10, 14},
	

	{5,0, 5},	
	{5,1, 6},	
	{5,2, 7},
	{5,3, 8},
	{5,4, 9},
	{5,5, 10},
	{5,6, 11},
	{5,7, 12},
	{5,8, 13},
	{5,9, 14},	
	{5,10, 15},

	{6,0, 6},	
	{6,1, 7},	
	{6,2, 8},
	{6,3, 9},
	{6,4, 10},
	{6,5, 11},
	{6,6, 12},
	{6,7, 13},
	{6,8, 14},
	{6,9, 15},	
	{6,10, 16}

	
//	{2,3, 5},	
//	{3,4, 7},
//	{8,2, 10},
//	{1,1, 2}
    };
    
    
    /**
     * @param args
     */
    public static void main(String[] args) {
	new NeuralNetwork().test();
    }
    
    
    
    
    public void test() {
	
	// AND Neuron
	Neuron neuronAND = new Neuron();
	neuronAND.initInput(2);
	neuronAND.trainZZZ(learnDataAND);
	
	// AND
	double testDataAND[][] = {
		{0,0, 0},
		{1,0, 0},
		{0,1, 0},
		{1,1, 1}		
	    };
	

	System.out.println("Test AND Neuron") ;
	System.out.println("=========================================") ;
	
	processNeuronZZZ(neuronAND, testDataAND);
	
	/*
	// OR Neuron
	Neuron neuronOR = new Neuron();
	neuronOR.initInput(2);
	neuronOR.train(learnDataOR);
	
	// OR
	double testDataOR[][] = {
		{0,0, 0},
		{1,0, 1},
		{0,1, 1},
		{1,1, 1}		
	    };

	System.out.println() ;
	System.out.println("Test OR Neuron") ;
	System.out.println("=========================================") ;
	processNeuron(neuronOR, testDataOR);

	// XOR Neuron
	Neuron neuronXOR = new Neuron();
	neuronXOR.initInput(2);
	neuronXOR.setWeights(new double[] {0.5,0.5});
	neuronXOR.train(learnDataXOR);
	
	
	
	// XOR
	double testDataXOR[][] = {
		{0,0, 0},
		{1,0, 1},
		{0,1, 1},
		{1,1, 0}		
	    };

	
	System.out.println() ;
	System.out.println("Test XOR Neuron") ;
	System.out.println("=========================================") ;
	processNeuron(neuronXOR, testDataXOR);

	
	
	
	// XNOR Neuron
	Neuron neuronXNOR = new Neuron();
	neuronXNOR.initInput(2);
	neuronXNOR.train(learnDataXNOR);
	
	// XNOR
	double testDataXNOR[][] = {
		{0,0, 1},
		{1,0, 0},
		{0,1, 0},
		{1,1, 1}		
	    };

	
	System.out.println() ;
	System.out.println("Test XNOR Neuron") ;
	System.out.println("=========================================") ;
	processNeuron(neuronXNOR, testDataXNOR);
	*/
    }
    
    private void processNeuron(Neuron neuron, double data[][]) {
	for (int p = 0; p < data.length; p++) {
	    neuron.setInputs(java.util.Arrays.copyOf(data[p],  data[p].length - 1));
	    neuron.summator();
	    double originalOut = data[p][2];
	    System.out.println("" + neuron.getOutput() + "  <->  " + originalOut +  (originalOut != neuron.getOutput() ? (" FAIL (" + deltaStr(originalOut, neuron.getOutput()) + ")") : "")) ;
	}
    }
    
    private void processNeuronZZZ(Neuron neuron, double data[][]) {
	for (int p = 0; p < data.length; p++) {
	    neuron.setInputs(java.util.Arrays.copyOf(data[p],  data[p].length - 1));
	    neuron.calculate();
	    double originalOut = data[p][2];
	    System.out.println("" + neuron.getOutput() + "  <->  " + originalOut +  (originalOut != neuron.getOutput() ? (" FAIL (" + deltaStr(originalOut, neuron.getOutput()) + ")") : "")) ;
	}
    }
    

    private String deltaStr(double a, double b) {
	double delta = ((a - b) / b) * 100d; 
	return "" + delta + " %";
    }
    
    public void test2() {

	// AND Neuron
	Neuron neuronAND = new Neuron();
	neuronAND.initInput(2);
	neuronAND.train(learnDataSUM);
	
	// AND
	double testDataAND[][] = {
		{1,1, 2},
		{1,2, 3},
		{3,1, 4},
		{1,3, 4},
		{10,10, 20},
		{1,1, 2}		
	    };
	

	System.out.println("Test SUM Neuron") ;
	System.out.println("=========================================") ;
	
	processNeuron(neuronAND, testDataAND);
	
    }
    
}
